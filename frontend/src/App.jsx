    // --- frontend/src/App.jsx ---
    import { useState, useEffect, useCallback } from 'react';
    import { ethers } from 'ethers';

    // Import contract artifacts and address
    // These files were generated by the deploy script
    import ProvenanceContractInfo from './contracts/Provenance.json';
    import contractAddressData from './contracts/contract-address.json';

    // Import Components
    import ConnectWallet from './components/ConnectWallet';
    import AdminPanel from './components/AdminPanel';
    import CreateBatch from './components/CreateBatch';
    import AddEvent from './components/AddEvent';
    import ViewBatch from './components/ViewBatch';

    // Get contract address and ABI from imported JSON files
    const contractAddress = contractAddressData.Provenance;
    const contractABI = ProvenanceContractInfo.abi;

    // Role constants (must match Solidity keccak256 for checking roles)
    const ORIGINATOR_ROLE = ethers.keccak256(ethers.toUtf8Bytes("ORIGINATOR_ROLE"));
    const CUSTODIAN_ROLE = ethers.keccak256(ethers.toUtf8Bytes("CUSTODIAN_ROLE"));

    function App() {
        // State variables to hold app data
        const [provider, setProvider] = useState(null); // Ethers provider
        const [signer, setSigner] = useState(null);     // Ethers signer (for sending transactions)
        const [account, setAccount] = useState(null);   // Connected wallet address
        const [contract, setContract] = useState(null); // Ethers contract instance
        const [isAdmin, setIsAdmin] = useState(false);  // Is connected account the owner?
        const [isOriginator, setIsOriginator] = useState(false); // Does account have Originator role?
        const [isCustodian, setIsCustodian] = useState(false);  // Does account have Custodian role?
        const [networkName, setNetworkName] = useState('');     // Name of the connected network (e.g., sepolia)
        const [message, setMessage] = useState({ text: '', type: '' }); // For displaying status messages (type: 'info', 'success', 'error')
        const [loading, setLoading] = useState(false); // General loading state indicator

        // --- Helper Functions ---

        // Clears the status message after a delay
        const clearMessage = useCallback(() => {
            setTimeout(() => setMessage({ text: '', type: '' }), 5000); // Clear after 5 seconds
        }, []);

        // Displays a status message and sets a timer to clear it
        const showMessage = useCallback((text, type = 'info', duration = 5000) => {
            console.log(`Message (${type}): ${text}`); // Log message for debugging
            setMessage({ text, type });
            // Clear the message after the specified duration
            setTimeout(() => setMessage(m => m.text === text ? { text: '', type: '' } : m), duration);
        }, []); // Dependencies: none needed here

        // --- Wallet Connection & Setup ---

        // Function to connect to the user's MetaMask wallet
        const connectWallet = useCallback(async () => {
            // Check if MetaMask (window.ethereum) is installed
            if (!window.ethereum) {
                showMessage('MetaMask not detected. Please install MetaMask!', 'error');
                return;
            }

            setLoading(true);
            showMessage('Connecting wallet...', 'info');
            try {
                // Use Ethers.js BrowserProvider to interact with MetaMask
                const web3Provider = new ethers.BrowserProvider(window.ethereum);
                // Request account access if not already granted
                const accounts = await web3Provider.send("eth_requestAccounts", []);
                // Get the signer object to send transactions
                const web3Signer = await web3Provider.getSigner();
                const userAccount = accounts[0]; // Get the first connected account
                const network = await web3Provider.getNetwork(); // Get network details

                // --- Network Check ---
                // Ensure the user is connected to the correct network (Sepolia)
                const sepoliaChainId = '0xaa36a7'; // 11155111 in hexadecimal
                 const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });

                if (currentChainId !== sepoliaChainId) {
                     showMessage(`Please connect to the Sepolia Test Network in MetaMask. You are currently on network ID ${currentChainId}.`, 'error', 10000);
                     setLoading(false);
                     // Reset state if on wrong network
                     setAccount(null);
                     setSigner(null);
                     setProvider(null);
                     setContract(null);
                     return; // Stop the connection process
                 }
                 // --- End Network Check ---

                // Update state with provider, signer, account, and network info
                setProvider(web3Provider);
                setSigner(web3Signer);
                setAccount(userAccount);
                setNetworkName(network.name); // e.g., "sepolia"

                // Create an instance of the smart contract using Ethers.js
                const provenanceContract = new ethers.Contract(contractAddress, contractABI, web3Signer);
                setContract(provenanceContract);

                // Show success message
                showMessage(`Wallet connected: ${userAccount.substring(0, 6)}...${userAccount.substring(userAccount.length - 4)} on ${network.name}`, 'success');

            } catch (error) {
                // Handle errors during connection (e.g., user rejects connection)
                console.error("Wallet connection error:", error);
                showMessage(`Connection failed: ${error.message || 'User rejected connection.'}`, 'error');
                // Reset state on error
                setAccount(null);
                setSigner(null);
                setProvider(null);
                setContract(null);
            } finally {
                // Ensure loading indicator is turned off
                setLoading(false);
            }
        }, [showMessage]); // Dependency: showMessage function

        // Function to check the roles (Owner, Originator, Custodian) of the connected account
        const checkRoles = useCallback(async () => {
            // Only proceed if contract instance and account address are available
            if (!contract || !account) return;
            setLoading(true); // Indicate loading
            try {
                // Call contract functions to check roles
                const owner = await contract.owner(); // Get owner address
                const originatorStatus = await contract.hasRole(ORIGINATOR_ROLE, account); // Check Originator role
                const custodianStatus = await contract.hasRole(CUSTODIAN_ROLE, account);  // Check Custodian role

                // Update state based on role checks
                setIsAdmin(owner.toLowerCase() === account.toLowerCase()); // Case-insensitive comparison
                setIsOriginator(originatorStatus);
                setIsCustodian(custodianStatus);
                console.log(`Roles checked: Admin=${isAdmin}, Originator=${originatorStatus}, Custodian=${custodianStatus}`);
            } catch (error) {
                // Handle errors during role checking
                console.error("Error checking roles:", error);
                showMessage("Could not verify user roles.", 'error');
                // Reset roles on error
                setIsAdmin(false);
                setIsOriginator(false);
                setIsCustodian(false);
            } finally {
                setLoading(false); // Stop loading indicator
            }
            // Dependencies: contract, account, showMessage, isAdmin (to satisfy linter, though it's set internally)
        }, [contract, account, showMessage, isAdmin]);

        // --- Effects ---

        // Effect hook to handle wallet events (account changes, network changes)
        useEffect(() => {
            // Check if MetaMask is installed
            if (window.ethereum) {
                // Listener for when the user changes accounts in MetaMask
                const handleAccountsChanged = (accounts) => {
                    console.log("Accounts changed:", accounts);
                    if (accounts.length === 0) {
                        // Handle wallet disconnection
                        showMessage('Wallet disconnected.', 'info');
                        setAccount(null);
                        setSigner(null);
                        setContract(null);
                        setIsAdmin(false);
                        setIsOriginator(false);
                        setIsCustodian(false);
                    } else {
                        // Reconnect with the new account
                        connectWallet();
                    }
                };

                 // Listener for when the user changes networks in MetaMask
                 const handleChainChanged = (chainId) => {
                    console.log("Network changed to:", chainId);
                    showMessage('Network changed. Please ensure you are on Sepolia. Reconnecting...', 'info');
                    // Force re-connection which includes the network check
                    connectWallet();
                };

                // Add listeners
                window.ethereum.on('accountsChanged', handleAccountsChanged);
                 window.ethereum.on('chainChanged', handleChainChanged);

                // Cleanup function: remove listeners when the component unmounts
                 return () => {
                     if (window.ethereum.removeListener) { // Check needed for some environments
                        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
                        window.ethereum.removeListener('chainChanged', handleChainChanged);
                     }
                 };
            }
            // Dependencies: connectWallet, showMessage (functions defined with useCallback)
        }, [connectWallet, showMessage]);

        // Effect hook to check user roles whenever the account or contract instance changes
        useEffect(() => {
            if (account && contract) {
                checkRoles();
            }
            // Dependencies: account, contract, checkRoles (function defined with useCallback)
        }, [account, contract, checkRoles]);

        // --- Render Logic ---
        return (
            // Main container with Tailwind CSS classes for layout and styling
            <div className="container mx-auto p-4 pt-8 max-w-4xl">
                {/* Header Section */}
                <header className="text-center mb-8">
                    <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-100">TraceMark Provenance</h1>
                    <p className="text-gray-600 dark:text-gray-400">Track items transparently on the blockchain</p>
                </header>

                {/* Message Display Area */}
                {message.text && (
                    <div className={`alert alert-${message.type || 'info'}`} role="alert">
                        {message.text}
                    </div>
                )}

                {/* Wallet Connection Component */}
                <ConnectWallet
                    account={account}
                    networkName={networkName}
                    connectWallet={connectWallet}
                    loading={loading}
                />

                {/* Conditional Rendering: Show panels only if wallet is connected */}
                {account && contract && (
                    <div className="mt-6 space-y-6"> {/* Add spacing between sections */}
                        {/* Display current roles */}
                        <div className="text-center text-sm mb-4 p-2 bg-gray-200 dark:bg-gray-700 rounded">
                            Roles: {isAdmin ? ' Owner' : ''}{isOriginator ? ' Originator' : ''}{isCustodian ? ' Custodian' : ''}
                            {!isAdmin && !isOriginator && !isCustodian && ' None'}
                        </div>

                        {/* Admin Panel (visible only to contract owner) */}
                        {isAdmin && (
                            <AdminPanel
                                contract={contract}
                                showMessage={showMessage}
                                originatorRole={ORIGINATOR_ROLE}
                                custodianRole={CUSTODIAN_ROLE}
                            />
                        )}

                        {/* Create Batch Panel (visible only to Originators) */}
                        {isOriginator && (
                            <CreateBatch
                                contract={contract}
                                showMessage={showMessage}
                            />
                        )}

                        {/* Add Event Panel (visible only to Custodians) */}
                        {isCustodian && (
                            <AddEvent
                                contract={contract}
                                showMessage={showMessage}
                            />
                        )}

                        {/* View Batch Panel (visible to everyone connected) */}
                        <ViewBatch
                            contract={contract}
                            showMessage={showMessage}
                        />
                    </div>
                )}

                 {/* Footer Section */}
                 <footer className="text-center mt-12 text-xs text-gray-500 dark:text-gray-400">
                    Contract Address ({networkName || 'N/A'}):
                    {/* Link to Etherscan for the deployed contract */}
                    <a
                        href={`https://sepolia.etherscan.io/address/${contractAddress}`}
                        target="_blank" // Open in new tab
                        rel="noopener noreferrer" // Security best practice
                        className="text-blue-500 hover:underline ml-1 break-all" // Styling
                    >
                        {contractAddress}
                    </a>
                </footer>
            </div>
        );
    }

    export default App; // Export the main App component
    